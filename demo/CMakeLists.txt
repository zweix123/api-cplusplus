cmake_minimum_required(VERSION 3.6)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

project(apiDemo)

set(LINK_LIBS)
if(USE_OPENSSL)
    add_definitions("-DUSE_OPENSSL=1")
    if(OPENSSL_PATH)
        set(ENV{OPENSSL_ROOT_DIR} ${OPENSSL_PATH})
    endif()
    find_package(OpenSSL REQUIRED)
    include_directories(${OPENSSL_INCLUDE_DIR})
    message("openssl include dir    : ${OPENSSL_INCLUDE_DIR}")
    message("openssl ssl lib dir    : ${OPENSSL_SSL_LIBRARY}")
    message("openssl crypto lib dir : ${OPENSSL_CRYPTO_LIBRARY}")
endif()
if(UNIX)
    add_compile_options(-std=c++11 -DLINUX -Wall -O3 -fPIC -Wl,-rpath,${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_CURRENT_SOURCE_DIR}/lib)
    if(ABI EQUAL 0)
        message("set _GLIBCXX_USE_CXX11_ABI to 0")
        add_definitions("-D_GLIBCXX_USE_CXX11_ABI=0")
    elseif(ABI EQUAL 1)
        message("set _GLIBCXX_USE_CXX11_ABI to 1")
        add_definitions("-D_GLIBCXX_USE_CXX11_ABI=1")
    endif()
    list(APPEND LINK_LIBS DolphinDBAPI rt pthread)
elseif(WIN32)
    if(MSVC)
        add_compile_options(-DWINDOWS -DNOMINMAX -D_DEBUG)
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MDd")
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
        list(APPEND LINK_LIBS DolphinDBAPI)
    elseif(MINGW)
        add_compile_options(-std=c++11 -DWINDOWS -Wall -O0 -g -fPIC -Wl,-rpath,${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_CURRENT_SOURCE_DIR}/lib)
        if(ABI EQUAL 0)
            message("set _GLIBCXX_USE_CXX11_ABI to 0")
            add_definitions("-D_GLIBCXX_USE_CXX11_ABI=0")
        elseif(ABI EQUAL 1)
            message("set _GLIBCXX_USE_CXX11_ABI to 1")
            add_definitions("-D_GLIBCXX_USE_CXX11_ABI=1")
        endif()
        list(APPEND LINK_LIBS DolphinDBAPI pthread)
    endif()
endif()
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/../include
)
link_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/
)

file(GLOB_RECURSE files src/*.cpp)
foreach(file ${files})
    string(REGEX MATCH "src/.*" relative_path ${file})
    string(REGEX REPLACE "src/" "" target_name ${relative_path})
    string(REGEX REPLACE ".cpp" "" target_name ${target_name})

    add_executable(${target_name} ${file})
    target_link_libraries(${target_name} ${LINK_LIBS})
endforeach()

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/)
